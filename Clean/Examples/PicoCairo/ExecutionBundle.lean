/-
PicoCairo Execution Bundle
Generated by Claude
-/

import Clean.Circuit.Basic
import Clean.Utils.Vector
import Clean.Examples.PicoCairo.Types
import Clean.Examples.PicoCairo.AddInstruction
import Clean.Examples.PicoCairo.MulInstruction
import Clean.Examples.PicoCairo.StoreStateInstruction
import Clean.Examples.PicoCairo.LoadStateInstruction

namespace Examples.PicoCairo

variable {p : ℕ} [Fact p.Prime] [p_large_enough: Fact (p > 512)]

/--
Instruction capacities for the execution bundle.
Groups all instruction type capacities with their NeZero constraints.
-/
structure InstructionCapacities where
  addCapacity : ℕ
  mulCapacity : ℕ
  storeStateCapacity : ℕ
  loadStateCapacity : ℕ
  addCapacity_nz : NeZero addCapacity
  mulCapacity_nz : NeZero mulCapacity
  storeStateCapacity_nz : NeZero storeStateCapacity
  loadStateCapacity_nz : NeZero loadStateCapacity

instance (capacities : InstructionCapacities) : NeZero capacities.addCapacity := capacities.addCapacity_nz
instance (capacities : InstructionCapacities) : NeZero capacities.mulCapacity := capacities.mulCapacity_nz
instance (capacities : InstructionCapacities) : NeZero capacities.storeStateCapacity := capacities.storeStateCapacity_nz
instance (capacities : InstructionCapacities) : NeZero capacities.loadStateCapacity := capacities.loadStateCapacity_nz

/--
Main execution bundle that combines all instruction type bundles.
Includes ADD, MUL, StoreState, and LoadState instructions.
-/
def executionBundleMain
    (capacities : InstructionCapacities)
    {programSize : ℕ} [NeZero programSize] (program : Fin programSize → (F p)) (h_programSize : programSize < p)
    {memorySize : ℕ} [NeZero memorySize] (memory : Fin memorySize → (F p)) (h_memorySize : memorySize < p)
    (addInputs : Var (ProvableVector InstructionStepInput capacities.addCapacity) (F p))
    (mulInputs : Var (ProvableVector InstructionStepInput capacities.mulCapacity) (F p))
    (storeStateInputs : Var (ProvableVector InstructionStepInput capacities.storeStateCapacity) (F p))
    (loadStateInputs : Var (ProvableVector InstructionStepInput capacities.loadStateCapacity) (F p)) :
    Circuit (F p) Unit := do

  -- Execute ADD instruction bundle
  addStepCircuitsBundle capacities.addCapacity program h_programSize memory h_memorySize addInputs

  -- Execute MUL instruction bundle
  mulStepCircuitsBundle capacities.mulCapacity program h_programSize memory h_memorySize mulInputs

  -- Execute StoreState instruction bundle
  storeStateStepCircuitsBundle capacities.storeStateCapacity program h_programSize memory h_memorySize storeStateInputs

  -- Execute LoadState instruction bundle
  loadStateStepCircuitsBundle capacities.loadStateCapacity program h_programSize memory h_memorySize loadStateInputs

  return ()

end Examples.PicoCairo
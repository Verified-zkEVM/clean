/-
PicoCairo Execution Bundle
Generated by Claude
-/

import Clean.Circuit.Basic
import Clean.Utils.Vector
import Clean.Examples.PicoCairo.Types
import Clean.Examples.PicoCairo.AddInstruction
import Clean.Examples.PicoCairo.MulInstruction
import Clean.Examples.PicoCairo.StoreStateInstruction
import Clean.Examples.PicoCairo.LoadStateInstruction

namespace Examples.PicoCairo

variable {p : ℕ} [Fact p.Prime] [p_large_enough: Fact (p > 512)]

/--
Instruction capacities for the execution bundle.
Groups all instruction type capacities with their NeZero constraints.
-/
structure InstructionCapacities where
  addCapacity : ℕ
  mulCapacity : ℕ
  storeStateCapacity : ℕ
  loadStateCapacity : ℕ
  addCapacity_nz : NeZero addCapacity
  mulCapacity_nz : NeZero mulCapacity
  storeStateCapacity_nz : NeZero storeStateCapacity
  loadStateCapacity_nz : NeZero loadStateCapacity

instance (capacities : InstructionCapacities) : NeZero capacities.addCapacity := capacities.addCapacity_nz
instance (capacities : InstructionCapacities) : NeZero capacities.mulCapacity := capacities.mulCapacity_nz
instance (capacities : InstructionCapacities) : NeZero capacities.storeStateCapacity := capacities.storeStateCapacity_nz
instance (capacities : InstructionCapacities) : NeZero capacities.loadStateCapacity := capacities.loadStateCapacity_nz

/--
Bundled instruction inputs for all instruction types.
Groups the input vectors for ADD, MUL, StoreState, and LoadState instructions.
-/
structure BundledInstructionInputs (capacities : InstructionCapacities) (F : Type) where
  addInputs : ProvableVector InstructionStepInput capacities.addCapacity F
  mulInputs : ProvableVector InstructionStepInput capacities.mulCapacity F
  storeStateInputs : ProvableVector InstructionStepInput capacities.storeStateCapacity F
  loadStateInputs : ProvableVector InstructionStepInput capacities.loadStateCapacity F

instance (capacities : InstructionCapacities) : ProvableStruct (BundledInstructionInputs capacities) where
  components := [
    ProvableVector InstructionStepInput capacities.addCapacity,
    ProvableVector InstructionStepInput capacities.mulCapacity,
    ProvableVector InstructionStepInput capacities.storeStateCapacity,
    ProvableVector InstructionStepInput capacities.loadStateCapacity
  ]
  toComponents := fun { addInputs, mulInputs, storeStateInputs, loadStateInputs } =>
    .cons addInputs (.cons mulInputs (.cons storeStateInputs (.cons loadStateInputs .nil)))
  fromComponents := fun (.cons addInputs (.cons mulInputs (.cons storeStateInputs (.cons loadStateInputs .nil)))) =>
    { addInputs, mulInputs, storeStateInputs, loadStateInputs }

instance (capacities : InstructionCapacities) : NonEmptyProvableType (BundledInstructionInputs capacities) where
  nonempty := by
    simp only [size, circuit_norm]
    simp only [List.sum_cons, List.sum_nil, add_zero, Nat.reduceAdd, gt_iff_lt, add_pos_iff,
      Nat.ofNat_pos, mul_pos_iff_of_pos_right]
    have : NeZero capacities.addCapacity := inferInstance
    rcases this
    omega

/--
Main execution bundle that combines all instruction type bundles.
Includes ADD, MUL, StoreState, and LoadState instructions.
-/
def executionBundleMain
    (capacities : InstructionCapacities)
    {programSize : ℕ} [NeZero programSize] (program : Fin programSize → (F p)) (h_programSize : programSize < p)
    {memorySize : ℕ} [NeZero memorySize] (memory : Fin memorySize → (F p)) (h_memorySize : memorySize < p)
    (inputs : Var (BundledInstructionInputs capacities) (F p)) :
    Circuit (F p) Unit := do

  -- Execute ADD instruction bundle
  addStepCircuitsBundle capacities.addCapacity program h_programSize memory h_memorySize inputs.addInputs

  -- Execute MUL instruction bundle
  mulStepCircuitsBundle capacities.mulCapacity program h_programSize memory h_memorySize inputs.mulInputs

  -- Execute StoreState instruction bundle
  storeStateStepCircuitsBundle capacities.storeStateCapacity program h_programSize memory h_memorySize inputs.storeStateInputs

  -- Execute LoadState instruction bundle
  loadStateStepCircuitsBundle capacities.loadStateCapacity program h_programSize memory h_memorySize inputs.loadStateInputs

  return ()

end Examples.PicoCairo

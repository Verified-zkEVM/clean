/-
PicoCairo Execution Bundle
Generated by Claude
-/

import Clean.Circuit.Basic
import Clean.Utils.Vector
import Clean.Examples.PicoCairo.Types
import Clean.Examples.PicoCairo.AddInstruction
import Clean.Examples.PicoCairo.MulInstruction
import Clean.Examples.PicoCairo.StoreStateInstruction
import Clean.Examples.PicoCairo.LoadStateInstruction

namespace Examples.PicoCairo

variable {p : ℕ} [Fact p.Prime] [p_large_enough: Fact (p > 512)]

/--
Instruction capacities for the execution bundle.
Groups all instruction type capacities with their NeZero constraints.
-/
structure InstructionCapacities where
  addCapacity : ℕ
  mulCapacity : ℕ
  storeStateCapacity : ℕ
  loadStateCapacity : ℕ
  addCapacity_nz : NeZero addCapacity
  mulCapacity_nz : NeZero mulCapacity
  storeStateCapacity_nz : NeZero storeStateCapacity
  loadStateCapacity_nz : NeZero loadStateCapacity

instance (capacities : InstructionCapacities) : NeZero capacities.addCapacity := capacities.addCapacity_nz
instance (capacities : InstructionCapacities) : NeZero capacities.mulCapacity := capacities.mulCapacity_nz
instance (capacities : InstructionCapacities) : NeZero capacities.storeStateCapacity := capacities.storeStateCapacity_nz
instance (capacities : InstructionCapacities) : NeZero capacities.loadStateCapacity := capacities.loadStateCapacity_nz

/--
Bundled instruction inputs for all instruction types.
Groups the input vectors for ADD, MUL, StoreState, and LoadState instructions.
-/
structure BundledInstructionInputs (capacities : InstructionCapacities) (F : Type) where
  addInputs : ProvableVector InstructionStepInput capacities.addCapacity F
  mulInputs : ProvableVector InstructionStepInput capacities.mulCapacity F
  storeStateInputs : ProvableVector InstructionStepInput capacities.storeStateCapacity F
  loadStateInputs : ProvableVector InstructionStepInput capacities.loadStateCapacity F

instance (capacities : InstructionCapacities) : ProvableStruct (BundledInstructionInputs capacities) where
  components := [
    ProvableVector InstructionStepInput capacities.addCapacity,
    ProvableVector InstructionStepInput capacities.mulCapacity,
    ProvableVector InstructionStepInput capacities.storeStateCapacity,
    ProvableVector InstructionStepInput capacities.loadStateCapacity
  ]
  toComponents := fun { addInputs, mulInputs, storeStateInputs, loadStateInputs } =>
    .cons addInputs (.cons mulInputs (.cons storeStateInputs (.cons loadStateInputs .nil)))
  fromComponents := fun (.cons addInputs (.cons mulInputs (.cons storeStateInputs (.cons loadStateInputs .nil)))) =>
    { addInputs, mulInputs, storeStateInputs, loadStateInputs }

instance (capacities : InstructionCapacities) : NonEmptyProvableType (BundledInstructionInputs capacities) where
  nonempty := by
    simp only [size, circuit_norm]
    simp only [List.sum_cons, List.sum_nil, add_zero, Nat.reduceAdd, gt_iff_lt, add_pos_iff,
      Nat.ofNat_pos, mul_pos_iff_of_pos_right]
    have : NeZero capacities.addCapacity := inferInstance
    rcases this
    omega

/--
Main execution bundle that combines all instruction type bundles.
Includes ADD, MUL, StoreState, and LoadState instructions.
-/
def executionBundleMain
    (capacities : InstructionCapacities)
    {programSize : ℕ} [NeZero programSize] (program : Fin programSize → (F p)) (h_programSize : programSize < p)
    {memorySize : ℕ} [NeZero memorySize] (memory : Fin memorySize → (F p)) (h_memorySize : memorySize < p)
    (inputs : Var (BundledInstructionInputs capacities) (F p)) :
    Circuit (F p) Unit := do

  -- Execute ADD instruction bundle
  addStepCircuitsBundleFormalCircuit capacities.addCapacity program h_programSize memory h_memorySize inputs.addInputs

  -- Execute MUL instruction bundle
  mulStepCircuitsBundleFormalCircuit capacities.mulCapacity program h_programSize memory h_memorySize inputs.mulInputs

  -- Execute StoreState instruction bundle
  storeStateStepCircuitsBundleFormalCircuit capacities.storeStateCapacity program h_programSize memory h_memorySize inputs.storeStateInputs

  -- Execute LoadState instruction bundle
  loadStateStepCircuitsBundleFormalCircuit capacities.loadStateCapacity program h_programSize memory h_memorySize inputs.loadStateInputs

/--
Elaborated circuit for the execution bundle.
The localYields are the union of yields from all instruction bundles.
-/
def executionBundleElaborated
    (capacities : InstructionCapacities)
    {programSize : ℕ} [NeZero programSize] (program : Fin programSize → (F p)) (h_programSize : programSize < p)
    {memorySize : ℕ} [NeZero memorySize] (memory : Fin memorySize → (F p)) (h_memorySize : memorySize < p) :
    ElaboratedCircuit (F p) (BundledInstructionInputs capacities) unit where
  main := executionBundleMain capacities program h_programSize memory h_memorySize
  localLength _ :=
    capacities.addCapacity * 29 +
    capacities.mulCapacity * 29 +
    capacities.storeStateCapacity * 29 +
    capacities.loadStateCapacity * 29
  localLength_eq := by
    intros input offset
    simp only [circuit_norm, executionBundleMain]
    simp only [addStepCircuitsBundleFormalCircuit, addStepCircuitsBundleElaborated]
    simp only [mulStepCircuitsBundleFormalCircuit, mulStepCircuitsBundleElaborated]
    simp only [storeStateStepCircuitsBundleFormalCircuit, storeStateStepCircuitsBundleElaborated]
    simp only [loadStateStepCircuitsBundleFormalCircuit, loadStateStepCircuitsBundleElaborated]
    omega
  yields inputs env offset :=
    (addStepCircuitsBundleElaborated capacities.addCapacity program h_programSize memory h_memorySize).yields
      inputs.addInputs env offset ∪
    (mulStepCircuitsBundleElaborated capacities.mulCapacity program h_programSize memory h_memorySize).yields
      inputs.mulInputs env (offset + capacities.addCapacity * 29) ∪
    (storeStateStepCircuitsBundleElaborated capacities.storeStateCapacity program h_programSize memory h_memorySize).yields
      inputs.storeStateInputs env (offset + capacities.addCapacity * 29 + capacities.mulCapacity * 29) ∪
    (loadStateStepCircuitsBundleElaborated capacities.loadStateCapacity program h_programSize memory h_memorySize).yields
      inputs.loadStateInputs env (offset + capacities.addCapacity * 29 + capacities.mulCapacity * 29 + capacities.storeStateCapacity * 29)
  yields_eq := by
    intros inputs env offset
    simp only [circuit_norm, executionBundleMain]
    aesop
  subcircuitsConsistent := by
    intros inputs offset
    simp only [circuit_norm, executionBundleMain]
    omega

/--
Assumptions for the execution bundle: each instruction bundle must satisfy its assumptions.
-/
def executionBundleAssumptions
    (capacities : InstructionCapacities)
    {programSize : ℕ} [NeZero programSize]
    (inputs : BundledInstructionInputs capacities (F p)) (_yielded : Set (NamedList (F p))) : Prop :=
  addStepCircuitsBundleAssumptions capacities.addCapacity (programSize := programSize) inputs.addInputs _yielded ∧
  mulStepCircuitsBundleAssumptions capacities.mulCapacity (programSize := programSize) inputs.mulInputs _yielded ∧
  storeStateStepCircuitsBundleAssumptions capacities.storeStateCapacity (programSize := programSize) inputs.storeStateInputs _yielded ∧
  loadStateStepCircuitsBundleAssumptions capacities.loadStateCapacity (programSize := programSize) inputs.loadStateInputs _yielded

/--
Spec for the execution bundle: each instruction bundle must satisfy its spec,
and the local yields are the union of all bundle yields.
-/
def executionBundleSpec
    (capacities : InstructionCapacities)
    {programSize : ℕ} [NeZero programSize] (program : Fin programSize → (F p))
    {memorySize : ℕ} [NeZero memorySize] (memory : Fin memorySize → (F p))
    (inputs : BundledInstructionInputs capacities (F p)) (yielded : Set (NamedList (F p)))
    (_output : Unit) (localYields : Set (NamedList (F p))) : Prop :=
  ∃ (addLocalYields mulLocalYields storeStateLocalYields loadStateLocalYields : Set (NamedList (F p))),
    addStepCircuitsBundleSpec capacities.addCapacity program memory inputs.addInputs yielded () addLocalYields ∧
    mulStepCircuitsBundleSpec capacities.mulCapacity program memory inputs.mulInputs yielded () mulLocalYields ∧
    storeStateStepCircuitsBundleSpec capacities.storeStateCapacity program memory inputs.storeStateInputs yielded () storeStateLocalYields ∧
    loadStateStepCircuitsBundleSpec capacities.loadStateCapacity program memory inputs.loadStateInputs yielded () loadStateLocalYields ∧
    localYields = addLocalYields ∪ mulLocalYields ∪ storeStateLocalYields ∪ loadStateLocalYields

/--
Formal circuit for the execution bundle.
-/
def executionBundleFormalCircuit
    (capacities : InstructionCapacities)
    {programSize : ℕ} [NeZero programSize] (program : Fin programSize → (F p)) (h_programSize : programSize < p)
    {memorySize : ℕ} [NeZero memorySize] (memory : Fin memorySize → (F p)) (h_memorySize : memorySize < p) :
    GeneralFormalCircuit (F p) (BundledInstructionInputs capacities) unit where
  elaborated := executionBundleElaborated capacities program h_programSize memory h_memorySize
  Assumptions := executionBundleAssumptions capacities (programSize := programSize)
  Spec := executionBundleSpec capacities program memory
  soundness := by
    sorry
  completeness := sorry

end Examples.PicoCairo

/-
PicoCairo Execution Bundle
Generated by Claude
-/

import Clean.Circuit.Basic
import Clean.Utils.Vector
import Clean.Examples.PicoCairo.Types
import Clean.Examples.PicoCairo.AddInstruction
import Clean.Examples.PicoCairo.MulInstruction
import Clean.Examples.PicoCairo.StoreStateInstruction
import Clean.Examples.PicoCairo.LoadStateInstruction

namespace Examples.PicoCairo

variable {p : ℕ} [Fact p.Prime] [p_large_enough: Fact (p > 512)]

/--
Main execution bundle that combines all instruction type bundles.
Includes ADD, MUL, StoreState, and LoadState instructions.
-/
def executionBundleMain
    (addCapacity : ℕ) [NeZero addCapacity]
    (mulCapacity : ℕ) [NeZero mulCapacity]
    (storeStateCapacity : ℕ) [NeZero storeStateCapacity]
    (loadStateCapacity : ℕ) [NeZero loadStateCapacity]
    {programSize : ℕ} [NeZero programSize] (program : Fin programSize → (F p)) (h_programSize : programSize < p)
    {memorySize : ℕ} [NeZero memorySize] (memory : Fin memorySize → (F p)) (h_memorySize : memorySize < p)
    (addInputs : Var (ProvableVector InstructionStepInput addCapacity) (F p))
    (mulInputs : Var (ProvableVector InstructionStepInput mulCapacity) (F p))
    (storeStateInputs : Var (ProvableVector InstructionStepInput storeStateCapacity) (F p))
    (loadStateInputs : Var (ProvableVector InstructionStepInput loadStateCapacity) (F p)) :
    Circuit (F p) Unit := do

  -- Execute ADD instruction bundle
  addStepCircuitsBundle addCapacity program h_programSize memory h_memorySize addInputs

  -- Execute MUL instruction bundle
  mulStepCircuitsBundle mulCapacity program h_programSize memory h_memorySize mulInputs

  -- Execute StoreState instruction bundle
  storeStateStepCircuitsBundle storeStateCapacity program h_programSize memory h_memorySize storeStateInputs

  -- Execute LoadState instruction bundle
  loadStateStepCircuitsBundle loadStateCapacity program h_programSize memory h_memorySize loadStateInputs

  return ()

end Examples.PicoCairo